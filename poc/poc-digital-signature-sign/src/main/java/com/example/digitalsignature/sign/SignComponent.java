package com.example.digitalsignature.sign;

import java.io.File;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.example.digitalsignature.properties.DigitalSignatureProperties;

/**
 * This example copy from:
 * https://www.mkyong.com/java/java-digital-signatures-example/
 * 
 * @author SHAWN.SH.YANG
 *
 */
@Component
public class SignComponent {

	@Autowired
	private DigitalSignatureProperties digitalSignatureProperties;

	/**
	 * This method return a base64 encoded fingerprint generated by text and a
	 * private key
	 * 
	 * @param text
	 * @param privateKeyPath
	 * @return
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeyException
	 * @throws InvalidKeySpecException
	 * @throws IOException
	 * @throws SignatureException
	 */
	public String sign(String text, String privateKeyPath) throws NoSuchAlgorithmException, InvalidKeyException,
			InvalidKeySpecException, IOException, SignatureException {
		PrivateKey privateKey = this.getPrivateKey(privateKeyPath);
		Signature signature = Signature.getInstance(digitalSignatureProperties.getSignatureAlgorithm());
		signature.initSign(privateKey);
		signature.update(text.getBytes());
		return Base64.getEncoder().encodeToString(signature.sign());
	}

	private PrivateKey getPrivateKey(String privateKeyPath)
			throws NoSuchAlgorithmException, IOException, InvalidKeySpecException {
		byte[] keyBytes = FileUtils.readFileToByteArray(new File(privateKeyPath));
		PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
		KeyFactory kf = KeyFactory.getInstance(digitalSignatureProperties.getKeyFactoryAlgorithm());
		return kf.generatePrivate(spec);
	}

}
