package com.example.digitalsignature;

import java.io.File;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

import org.apache.commons.io.FileUtils;

/**
 * This example copy from:
 * https://www.mkyong.com/java/java-digital-signatures-example/
 * 
 * @author SHAWN.SH.YANG
 *
 */
public class DigitalSignature {

	public DigitalSignature(String keyFactoryAlgorithm, String signatureAlgorithm) {
		super();
		this.keyFactoryAlgorithm = keyFactoryAlgorithm;
		this.signatureAlgorithm = signatureAlgorithm;
	}

	private String keyFactoryAlgorithm;
	private String signatureAlgorithm;

	/**
	 * This method return a base64 encoded fingerprint generated by text and a
	 * private key
	 * 
	 * @param text
	 * @param privateKeyPath
	 * @return
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeyException
	 * @throws InvalidKeySpecException
	 * @throws IOException
	 * @throws SignatureException
	 */
	public String sign(String text, String privateKeyPath) throws NoSuchAlgorithmException, InvalidKeyException,
			InvalidKeySpecException, IOException, SignatureException {
		PrivateKey privateKey = this.getPrivateKey(privateKeyPath);
		Signature signature = Signature.getInstance(signatureAlgorithm);
		signature.initSign(privateKey);
		signature.update(text.getBytes());
		return Base64.getEncoder().encodeToString(signature.sign());
	}

	public boolean verify(String text, String fingerprintOfText, String publicKeyPath) throws NoSuchAlgorithmException,
			InvalidKeyException, InvalidKeySpecException, IOException, SignatureException {
		PublicKey publicKey = getPublicKey(publicKeyPath);
		Signature sig = Signature.getInstance(signatureAlgorithm);
		sig.initVerify(publicKey);
		sig.update(text.getBytes());
		return sig.verify(Base64.getDecoder().decode(fingerprintOfText));
	}

	private PublicKey getPublicKey(String publicKeyPath)
			throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
		byte[] keyBytes = FileUtils.readFileToByteArray(new File(publicKeyPath));
		X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
		KeyFactory kf = KeyFactory.getInstance(keyFactoryAlgorithm);
		return kf.generatePublic(spec);
	}

	private PrivateKey getPrivateKey(String privateKeyPath)
			throws NoSuchAlgorithmException, IOException, InvalidKeySpecException {
		byte[] keyBytes = FileUtils.readFileToByteArray(new File(privateKeyPath));
		PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
		KeyFactory kf = KeyFactory.getInstance(keyFactoryAlgorithm);
		return kf.generatePrivate(spec);
	}

}
